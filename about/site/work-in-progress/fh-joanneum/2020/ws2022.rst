.. include:: <mmlalias.txt>


WS2022
======

.. contents::
   :local:

Plan: Evolution
---------------

.. list-table::
   :align: left
   :widths: auto
   :header-rows: 1

   * * VO
     * KU
     * #Units
     * Topics
   * * 2022-10-06
     * 
     * 3
     * Theory: C++ Inheritance
       
       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/basics`
       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/virtual-method`
       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/polymorphism`

   * * 
     * 2022-10-10
     * 3
     * Theory: C++ Interfaces

       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/destructor`
       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/virtual-destructor`
       * :doc:`/trainings/material/soup/cxx03/100-inheritance-oo-design/interface`

       Exercise

       * :doc:`/trainings/material/soup/cxx-exercises/oo/sensor-interface`

   * * 2022-10-31
     * 
     * 3
     * 

       * Theory: Design Patterns (some)

         * https://github.com/jfasch/FH-ECE20-patterns
         * :doc:`/trainings/material/soup/cxx-design-patterns/uml/uml`
         * :doc:`/trainings/material/soup/cxx-design-patterns/oo-principles`
         * :doc:`/trainings/material/soup/cxx-design-patterns/sensor-hierarchy`
         * :doc:`/trainings/material/soup/cxx-design-patterns/adapter/adapter`

   * *
     * 2022-11-02
     * 3
     * 

       * :doc:`/trainings/material/soup/cxx03/060-stl/010-basics/topic`
       * :doc:`/trainings/material/soup/cxx03/060-stl/040-sequential-containers/vector`
       * Continuing with Design Patterns

         * :doc:`/trainings/material/soup/cxx-design-patterns/adapter/adapter`

   * * 2022-11-11
     * 
     * 3
     * 

       * Continuing with Design Patterns

	 * :doc:`/trainings/material/soup/cxx-design-patterns/composite/composite`
           (use ``std::vector<>`` to store multiple ``Sensor*``;
           :doc:`more information
           </trainings/material/soup/cxx03/060-stl/040-sequential-containers/vector>`)

   * *
     * 2022-11-15
     * 4
     *
   * * 
     * 2022-11-22
     * 4
     *

       * :doc:`ws2022/toolchain-setup`
       * :doc:`/trainings/material/soup/cxx-exercises/oo/sensor-w1`
       
   * * 
     * 2022-11-29
     * 4
     * 
   * * 2022-12-07
     * 
     * 3
     * * Lab Exams

         * Lab Exam: 2022-12-21
	 * Lab Exam: 2023-01-17

       * Syllabus Modification (`Moodle Voting
         <https://moodle-22-23.fh-joanneum.at/mod/choice/view.php?id=31375>`__)

         In "2.1 Beurteilungsschema" (English: *Grading*), it says ...

	 The total grade is composed of a practical and a theoretical
	 part as follows:

	 * 60% out of two lab exams (30% each), during the semester

	   * **Additionally, students are given the possibility to
             substitute or complement this 60% practical share by
             delivering various small projects. The amount/weight of
             one such project is decided by the teacher, together with
             the students.**
	 
	 * 40% out of one single written exam, at the end of the
           semester

       * Excerpts from the C++ Standard Library
       
	 * :doc:`/trainings/material/soup/cxx03/900-standard-library-miscellanea/string/topic`
	 * :doc:`/trainings/material/soup/cxx11/filesystem/topic`
	 * Use case: detect W1 sensor *by address*

       * C++11 maybe

         * :doc:`/trainings/material/soup/cxx11/020-new-language-features/range-based-for`
         * :doc:`/trainings/material/soup/cxx11/010-introduction/overview-livehacking`

   * * 
     * 2022-12-13
     * 4
     *
   * * 2022-12-21
     * 
     * 3
     *
   * * 
     * 2023-01-10
     * 4
     *
   * * 
     * 2023-01-17
     * 4
     *
